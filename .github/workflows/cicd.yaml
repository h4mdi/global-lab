name: Voting App CI/CD

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_TAG: ${{ github.sha }}
  PORT: 5000

jobs:
  build-test:
    name: Build and Test Voting App
    runs-on: ubuntu-latest
    environment: testing
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ runner.os }}-${{ github.ref }}
          restore-keys: |
            buildx-${{ runner.os }}-

      - name: Build containers
        run: docker compose build

      - name: Run app
        run: docker compose up -d

      - name: Quick Check test
        run: |
          echo "Waiting for app..."
          sleep 10
          curl -f http://localhost:5000
          curl -f http://localhost:5001

      - name: Stop app
        if: always()
        run: docker compose down -v

  push-images:
    name: Push Docker Images
    needs: build-test
    runs-on: ubuntu-latest
    environment: production
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and tag images
        run: |
          docker compose build
          docker compose images
          echo "Tagging images as ${{ env.IMAGE_TAG }}"

      - name: Push images
        run: docker compose push

      - name: Tag versioned images
        run: |
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/vote:${{ env.IMAGE_TAG }} ${{ secrets.DOCKERHUB_USERNAME }}/vote:v1.0.${{ github.run_number }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/vote:v1.0.${{ github.run_number }}

  deploy-simulate:
    name: Simulate Deployment
    needs: push-images
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main'

    steps:
      - name: Output Deployment Info
        run: |
          echo "Build & Push successful!"
          echo "Images available at docker.io/${{ secrets.DOCKERHUB_USERNAME }}/"
          echo "Ready for production deployment."
